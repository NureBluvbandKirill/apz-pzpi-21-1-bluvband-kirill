1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

IoT частина системи взаємодіє з перевезеннями та повертає інформацію, про стан вантажу та його локацію.	Взаємодія користувачів з IoT частиною системи представлено на діаграмі прецедентів (рис. 1).

2 ПРОГРАМНА РЕАЛІЗАЦІЯ

Для демонстрації функціональних можливостей IoT частини системи, було вирішено реалізувати програмний код мовою програмування C# та фреймворком .NET 8, що максимально відповідає обмеженням апаратних ресурсів IoT пристроїв. Для виведення інформації використовую консольний інтерфейс (CLI). Надсилання даних реалізовано за допомогою бібліотеки System.Net.Http, а сами дані передаються у форматі JSON.
Програма призначена для тривалого доступу на сервері, де існує таблиця з ідентифікаторами, які можна присвоїти IoT пристрою. Це надає можливість записувати показники датчика протягом тривалого періоду.
Код програми написано з мінімальною кількістю рядків для оптимізації під пристрої з обмеженою потужністю. Крім того, програма легко портується на реальні IoT пристрої.

3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

Для написання IoT частини системи було обрано мову програмування C#. Компіляція відбувається за допомогою CLR компоненту .NET 8.
Для більш детальної візуалізації взаємодії пристрою з користувачами системи було розроблено діаграму взаємодії (див. додат. А.1).
Також було побудовано діаграму діяльності, що відображає взаємодію пристрою з сервером (див. додат. Б.1).
Приклади коду IoT частини системи представлено у додатку В.

ВИСНОВКИ

У ході виконання лабораторної роботи були отримані навички з проєктування IoT частини програмної системи. Результатом роботи є розроблена програмна реалізація IoT програмної частини. При розробці продукту було дотримано вимог чистого коду мови програмування C#.
